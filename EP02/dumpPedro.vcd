$date
	Thu Apr 18 13:46:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ! \mem[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 " \mem[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 # \mem[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 $ \mem[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 % \mem[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 & \mem[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ' \mem[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ( \mem[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ) \mem[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 * \mem[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 + \mem[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 , \mem[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 - \mem[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 . \mem[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 / \mem[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 0 \mem[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 1 \mem[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 2 \mem[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 3 \mem[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 4 \mem[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 5 \mem[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 6 \mem[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 7 \mem[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 8 \mem[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 9 \mem[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 : \mem[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ; \mem[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 < \mem[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 = \mem[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 > \mem[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 ? \mem[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$scope module CAL $end
$scope module regfile $end
$var reg 32 @ \mem[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb $end
$var wire 32 A data [31:0] $end
$var reg 1 B clk $end
$var reg 1 C opera $end
$var reg 5 D read [4:0] $end
$var reg 1 E reset $end
$scope module CAL $end
$var wire 1 B clock $end
$var wire 1 C opera $end
$var wire 5 F read [4:0] $end
$var wire 1 G reg_write $end
$var wire 1 E reset $end
$var wire 4 H inst_op [3:0] $end
$var wire 32 I data [31:0] $end
$var wire 32 J current_instruction [31:0] $end
$var wire 5 K Reg_read2 [4:0] $end
$var wire 5 L Reg_read1 [4:0] $end
$var wire 32 M Reg_out_B [31:0] $end
$var wire 5 N Reg_dest [4:0] $end
$var wire 32 O B [31:0] $end
$var wire 1 P ALU_zero $end
$var wire 1 Q ALU_overflow $end
$var wire 32 R ALU_out [31:0] $end
$var wire 4 S ALU_op [3:0] $end
$var wire 32 T A [31:0] $end
$var reg 1 U clocked $end
$var reg 1 V done $end
$var reg 4 W instruction_address [3:0] $end
$scope module instructionRom $end
$var wire 4 X address [3:0] $end
$var wire 32 Y data [31:0] $end
$var wire 1 Z oe $end
$upscope $end
$scope module regfile $end
$var wire 5 [ Read1 [4:0] $end
$var wire 5 \ Read2 [4:0] $end
$var wire 1 G RegWrite $end
$var wire 5 ] WriteReg [4:0] $end
$var wire 1 B clock $end
$var wire 32 ^ WriteData [31:0] $end
$var wire 32 _ Data2 [31:0] $end
$var wire 32 ` Data1 [31:0] $end
$var integer 32 a i [31:0] $end
$upscope $end
$scope module ula $end
$var wire 32 b A [31:0] $end
$var wire 4 c ALUctl [3:0] $end
$var wire 32 d B [31:0] $end
$var wire 1 P Overflow $end
$var wire 32 e sum_result [31:0] $end
$var wire 1 f sum_op $end
$var wire 32 g sub_result [31:0] $end
$var wire 1 h or_op $end
$var wire 1 i nor_op $end
$var wire 1 j minus_op $end
$var wire 1 k lt_op $end
$var wire 1 l and_op $end
$var wire 1 Q Zero $end
$var wire 32 m ALUout [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx m
0l
0k
1j
0i
0h
bx g
0f
bx e
bx d
b110 c
bx b
b100000 a
bx `
bx _
bx ^
b1010 ]
b111 \
bx [
1Z
b1000000011101010000010100110011 Y
b1111 X
b1111 W
0V
0U
bx T
b110 S
bx R
xQ
xP
bx O
b1010 N
bx M
bx L
b111 K
b1000000011101010000010100110011 J
bx I
b1 H
xG
bx F
1E
bx D
xC
0B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#1
1B
#2
0B
#3
1B
#4
0B
#5
1B
#6
0B
#7
1B
#8
0B
#9
1B
#10
0G
0B
0C
0E
#11
0P
0Q
b1 R
b1 ^
b1 m
1f
0j
b10 S
b10 c
b1 e
b11111111111111111111111111111111 g
b0 T
b0 `
b0 b
b1 O
b1 d
b0 H
b0 N
b0 ]
b1 K
b1 \
b100000000000000010011 J
b100000000000000010011 Y
b0 W
b0 X
bx +
1G
b0 L
b0 [
b0 A
b0 I
1B
1C
#12
0B
#13
b1 N
b1 ]
b100000000000010010011 J
b100000000000010010011 Y
b1 W
b1 X
1B
#14
0B
#15
b10 R
b10 ^
b10 m
b10 e
b0 g
b1 T
b1 `
b1 b
b1 L
b1 [
b1 H
b1 M
b1 _
b100001000000010110011 J
b100001000000010110011 Y
b10 W
b10 X
b1 "
1B
#16
0B
#17
b0 O
b0 d
b10 e
b10 g
b10 T
b10 `
b10 b
b0 M
b0 _
b10 N
b10 ]
b0 K
b0 \
b10 "
b1000000100110011 J
b1000000100110011 Y
b11 W
b11 X
1B
#18
0B
#19
0G
b10 A
b10 I
1B
b1 D
b1 F
0C
#20
0B
#21
1B
#22
0B
#23
1B
#24
0B
#25
1B
#26
0B
#27
1B
#28
0B
#29
1B
#30
0B
#31
1B
#32
0B
#33
1B
#34
0B
#35
1B
#36
0B
#37
1B
#38
0B
#39
b100 R
b100 ^
b100 m
b100 e
b0 g
b10 O
b10 d
b10 M
b10 _
b11 N
b11 ]
b10 K
b10 \
b1000001000000110110011 J
b1000001000000110110011 Y
b100 W
b100 X
b10 #
1G
b0 A
b0 I
1B
1C
#40
0B
#41
0Q
0f
1k
b111 S
b111 c
b1 R
b1 ^
b1 m
b110 e
b11111111111111111111111111111110 g
b100 O
b100 d
b100 M
b100 _
b101 H
b100 N
b100 ]
b11 K
b11 \
b100 $
b1100001010001000110011 J
b1100001010001000110011 Y
b101 W
b101 X
1B
#42
0B
#43
0Q
b11 R
b11 ^
b11 m
1j
0f
0k
b110 S
b110 c
b1 O
b1 d
b101 e
b11 g
b100 T
b100 `
b100 b
b1 M
b1 _
b11 L
b11 [
b1 H
b101 N
b101 ]
b100 K
b100 \
b1000000010000011000001010110011 J
b1000000010000011000001010110011 Y
b110 W
b110 X
b1 %
1B
#44
0B
#45
b111 R
b111 ^
b111 m
1h
0j
b1 S
b1 c
b100 O
b100 d
b111 e
b11111111111111111111111111111111 g
b11 T
b11 `
b11 b
b100 M
b100 _
b101 L
b101 [
b1101 H
b110 N
b110 ]
b11 K
b11 \
b11 &
b1100101110001100110011 J
b1100101110001100110011 Y
b111 W
b111 X
1B
#46
0B
#47
b1 R
b1 ^
b1 m
1l
0h
b0 S
b0 c
b100 e
b10 g
b1 O
b1 d
b1 M
b1 _
b1111 H
b111 N
b111 ]
b100 K
b100 \
b10000101111001110110011 J
b10000101111001110110011 Y
b1000 W
b1000 X
b111 '
1B
#48
0B
#49
0Q
0l
1h
b1 S
b1 c
b111111111111 R
b111111111111 ^
b111111111111 m
b1 T
b1 `
b1 b
bx M
bx _
b111 L
b111 [
b1000000000000 e
b11111111111111111111000000000010 g
b111111111111 O
b111111111111 d
b1100 H
b11111 K
b11111 \
b1 (
b11111111111100111110001110010011 J
b11111111111100111110001110010011 Y
b1001 W
b1001 X
1B
#50
0B
#51
1k
1Q
b0 R
b0 ^
b0 m
0h
b111 S
b111 c
b10 M
b10 _
b1 O
b1 d
b100 H
b1000 N
b1000 ]
b1 K
b1 \
b1000000000000 e
b111111111110 g
b111111111111 T
b111111111111 `
b111111111111 b
b100111010010000010011 J
b100111010010000010011 Y
b1010 W
b1010 X
b111111111111 (
1B
#52
0B
#53
0Q
b1 R
b1 ^
b1 m
1l
0k
b0 S
b0 c
b1110 H
b1001 N
b1001 ]
b0 )
b100111111010010010011 J
b100111111010010010011 Y
b1011 W
b1011 X
1B
#54
0B
#55
0Q
b1000000000000 R
b1000000000000 ^
b1000000000000 m
0l
1f
b10 S
b10 c
b0 H
b1010 N
b1010 ]
b100111000010100010011 J
b100111000010100010011 Y
b1100 W
b1100 X
b1 *
1B
#56
0B
#57
b1000000000001 R
b1000000000001 ^
b1000000000001 m
b1000000000000 T
b1000000000000 `
b1000000000000 b
b1 M
b1 _
b1010 L
b1010 [
b1000000000001 e
b111111111111 g
b1 O
b1 d
b1 H
b0 N
b0 ]
b1001 K
b1001 \
b1000000000000 +
b100101010000000000110011 J
b100101010000000000110011 Y
b1101 W
b1101 X
1B
#58
0B
#59
b1 R
b1 ^
b1 m
b1 e
b11111111111111111111111111111111 g
b0 T
b0 `
b0 b
b1000 L
b1000 [
b1010 N
b1010 ]
b100101000000010100110011 J
b100101000000010100110011 Y
b1110 W
b1110 X
1B
#60
0B
#61
b11111111111111111111000000000010 R
b11111111111111111111000000000010 ^
b11111111111111111111000000000010 m
0f
1j
b110 S
b110 c
b111111111111 O
b111111111111 d
b1000000000000 e
b11111111111111111111000000000010 g
b1 T
b1 `
b1 b
b111111111111 M
b111111111111 _
b1010 L
b1010 [
b111 K
b111 \
b1 +
1V
b1000000011101010000010100110011 J
b1000000011101010000010100110011 Y
b1111 W
b1111 X
1B
#62
0B
#63
b11111111111111111110000000000011 R
b11111111111111111110000000000011 ^
b11111111111111111110000000000011 m
0G
b1 e
b11111111111111111110000000000011 g
b11111111111111111111000000000010 T
b11111111111111111111000000000010 `
b11111111111111111111000000000010 b
1U
b11111111111111111111000000000010 +
1B
#64
0B
#65
1B
#66
0B
#67
1B
#68
0B
#69
1B
#70
0B
#71
1B
#72
0B
#73
1B
#74
0B
#75
1B
#76
0B
#77
1B
#78
0B
#79
1B
#80
0B
#81
1B
#82
0B
#83
1B
#84
0B
#85
1B
#86
0B
#87
1B
#88
0B
#89
1B
#90
0B
#91
1B
#92
0B
#93
1B
#94
0B
#95
1B
#96
0B
#97
1B
#98
0B
#99
1B
#100
0B
#101
1B
#102
0B
#103
1B
#104
0B
#105
1B
#106
0B
#107
1B
#108
0B
#109
1B
#110
0B
#111
1B
#112
0B
#113
1B
#114
0B
#115
1B
#116
0B
#117
1B
#118
0B
#119
1B
#120
0B
#121
1B
#122
0B
#123
1B
#124
0B
#125
1B
#126
0B
#127
1B
#128
0B
#129
1B
#130
0B
#131
1B
#132
0B
#133
1B
#134
0B
#135
1B
#136
0B
#137
1B
#138
0B
#139
1B
